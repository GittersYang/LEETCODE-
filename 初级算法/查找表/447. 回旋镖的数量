给定平面上 n 对不同的点，“回旋镖” 是由点表示的元组 (i, j, k) ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。

找到所有回旋镖的数量。你可以假设 n 最大为 500，所有点的坐标在闭区间 [-10000, 10000] 中。

示例:

输入:
[[0,0],[1,0],[2,0]]

输出:
2

注意越界

class Solution {
private:
    int distance(const vector<int>& a,const vector<int>& b){
        return((a[0]-b[0])* (a[0]-b[0])+ (a[1]-b[1])* (a[1]-b[1]));
    }

public:
    
    int numberOfBoomerangs(vector<vector<int>>& points) {
        
        int res=0;
        for(int i=0;i<points.size();i++){
            unordered_map<int,int>m;
            for(int j=0;j<points.size();j++){
               m[distance(points[i],points[j])]++;
            }
            for(unordered_map<int,int>::iterator mt=m.begin();mt!=m.end();mt++){
                if(mt->second>=2) res+= (mt->second)*(mt->second-1);
            }  
        }
        return res;
    }
    
};
