给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。

这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。

示例1:

输入: pattern = "abba", str = "dog cat cat dog"
输出: true
示例 2:

输入:pattern = "abba", str = "dog cat cat fish"
输出: false
示例 3:

输入: pattern = "aaaa", str = "dog cat cat dog"
输出: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-pattern
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


class Solution {
public:
    bool wordPattern(string pattern, string str) {
        vector<string> v;//存储分割后的字符串
        string c = " ";//分隔符c为' '
        SplitString(str,c,v);
        if (v.size() != pattern.size()) return false;
        unordered_map<char, string> amap;
        unordered_map<string, char> bmap;
        for (int i = 0; i < pattern.size(); ++i){
            if (amap.find(pattern[i]) != amap.end() && amap[pattern[i]] != v[i])
                return false;
            if (bmap.find(v[i]) != bmap.end() && bmap[v[i]] != pattern[i])
                return false;
            amap[pattern[i]] = v[i];
            bmap[v[i]] = pattern[i];
        }
        return true;
    }
    //s表示被分割的字符串，c表示分割符
    void SplitString(string & s,string & c, vector<string>& v) {
        std::string::size_type pos1, pos2;
        pos2 = s.find(c);
        pos1 = 0;
        while (string::npos != pos2){
            v.push_back(s.substr(pos1, pos2 - pos1));
            pos1 = pos2 + c.size();
            pos2 = s.find(c, pos1);
        }
        if (pos1 != s.length())
            v.push_back(s.substr(pos1));


        
    }
};
